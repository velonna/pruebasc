/*
 * utils.h
 *
 *  Created on: 11 may. 2021
 *      Author: utnso
 */

#ifndef I_MONGO_STORE_INCLUDE_UTILS_H_
#define I_MONGO_STORE_INCLUDE_UTILS_H_

#include<stdio.h>
#include<stdlib.h>
#include<sys/socket.h>
#include<unistd.h>
#include<netdb.h>
#include<commons/log.h>
#include<commons/config.h>
#include<commons/string.h>
#include<commons/collections/list.h>
#include<string.h>
#include<pthread.h>


#define BACKLOG 5			// Define cuantas conexiones vamos a mantener pendientes al mismo tiempo
#define MAX_PACKAGE_SIZE 1024	//El servidor no admitira paquetes de mas de 1024 bytes
#define MAXUSERNAME 30
#define MAX_MESSAGE_SIZE 300

/*
 * 	Definicion de estructuras
 *
 * 	Es importante destacar que utilizamos el tipo uint_32, incluida en el header <stdint.h> para mantener un estandar en la cantidad
 * 	de bytes del paquete.
 */
typedef struct _t_Package {
	char username[MAXUSERNAME];
	uint32_t username_long;
	char message[MAX_MESSAGE_SIZE];
	uint32_t message_long;
} t_Package;


typedef enum
{
	MENSAJE_I_MONGO=0,
	PAQUETE_I_MONGO=1
}op_code;

t_log* logger;


typedef struct
{
	int size;
	void* stream;
} t_buffer;

typedef struct
{
	op_code codigo_operacion;
	t_buffer* buffer;
} t_paquete;

pthread_t thread;
/*
 * 	Definicion de funciones
 */

int recieve_and_deserialize(t_Package *,int *);
void* recibir_buffer(int*, int);
void iterator(char* value);
void iniciar_servidor(char*);
void esperar_cliente(int);
void* recibir_mensaje(int socket_cliente, int* size);
int recibir_operacion(int);
void process_request(int cod_op, int cliente_fd);
void serve_client(int *socket);
void* serializar_paquete(t_paquete* paquete, int bytes);
void devolver_mensaje(void* payload, int size, int socket_cliente);
t_list* recibir_paquete(int);

#endif /* I_MONGO_STORE_INCLUDE_UTILS_H_ */
